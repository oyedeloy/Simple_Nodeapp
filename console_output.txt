Started by user Oyedele Oyeleye
17:13:33 Connecting to https://api.github.com with no credentials, anonymous access
Obtained Jenkinsfile from b700a05969a5e35fb83d3814666955b0c426f438
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/Simplilearn_Capstone1_master
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/Simplilearn_Capstone1_master/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/oyedeloy/Simple_Nodeapp.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/oyedeloy/Simple_Nodeapp.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
 > git fetch --no-tags --force --progress -- https://github.com/oyedeloy/Simple_Nodeapp.git +refs/heads/master:refs/remotes/origin/master # timeout=10
Checking out Revision b700a05969a5e35fb83d3814666955b0c426f438 (master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f b700a05969a5e35fb83d3814666955b0c426f438 # timeout=10
Commit message: "Ec2 readiness testing"
 > git rev-list --no-walk dd2d42c708d205f70dc57c1253bcbf44492acb4b # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build and Push Docker Image)
[Pipeline] script
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withDockerRegistry
$ docker login -u oyedeloy@gmail.com -p ******** https://registry.hub.docker.com
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
WARNING! Your password will be stored unencrypted in /var/lib/jenkins/workspace/Simplilearn_Capstone1_master@tmp/91904718-175c-4b2d-977b-259d4ac23db9/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
[Pipeline] {
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker build -t oyedeloy/simple_nodeapp:Version_02 -f Dockerfile .
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  374.4MB

Step 1/9 : FROM node:14 as build
 ---> 1d12470fa662
Step 2/9 : WORKDIR /app
 ---> Using cache
 ---> d5584dd6dce5
Step 3/9 : COPY package*.json ./
 ---> Using cache
 ---> e2c441342141
Step 4/9 : RUN npm install
 ---> Using cache
 ---> d7610fc3e5bc
Step 5/9 : COPY . .
 ---> 507a99e9540c
Step 6/9 : FROM nginx:alpine
 ---> b135667c9898
Step 7/9 : COPY --from=build /app/public /usr/share/nginx/html
 ---> Using cache
 ---> a23da67207c0
Step 8/9 : EXPOSE 8080
 ---> Using cache
 ---> 481ec4d9de13
Step 9/9 : CMD ["nginx", "-g", "daemon off;"]
 ---> Using cache
 ---> 5c3804b8e76d
Successfully built 5c3804b8e76d
Successfully tagged oyedeloy/simple_nodeapp:Version_02
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker tag oyedeloy/simple_nodeapp:Version_02 registry.hub.docker.com/oyedeloy/simple_nodeapp:Version_02
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker push registry.hub.docker.com/oyedeloy/simple_nodeapp:Version_02
The push refers to repository [registry.hub.docker.com/oyedeloy/simple_nodeapp]
dde4c61f9eb7: Preparing
4b701b99fec7: Preparing
01e36c0e0b84: Preparing
901e6dddcc99: Preparing
f126bda54112: Preparing
38067ed663bf: Preparing
854101110f63: Preparing
81fdcc81a9d0: Preparing
cc2447e1835a: Preparing
854101110f63: Waiting
38067ed663bf: Waiting
81fdcc81a9d0: Waiting
cc2447e1835a: Waiting
01e36c0e0b84: Layer already exists
f126bda54112: Layer already exists
901e6dddcc99: Layer already exists
dde4c61f9eb7: Layer already exists
4b701b99fec7: Layer already exists
38067ed663bf: Layer already exists
854101110f63: Layer already exists
81fdcc81a9d0: Layer already exists
cc2447e1835a: Layer already exists
Version_02: digest: sha256:30037946245a4005a028344c98c1ab4c6946231300e37b93b865d7f9b365cd70 size: 2200
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withDockerRegistry
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Terraform Operation)
[Pipeline] withCredentials
Masking supported pattern matches of $AWS_ACCESS_KEY_ID or $AWS_SECRET_ACCESS_KEY
[Pipeline] {
[Pipeline] sh
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.29.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] sh
+ terraform plan

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_instance.ASI_web[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "ASI_web" {
      [32m+[0m[0m ami                                  = "ami-024e6efaf93d85776"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "Java_key2"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "ASI test"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "ASI test"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_security_group.ASI_proj[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ASI_proj" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = -1
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "icmp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = -1
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 8080
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 8080
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ASI_proj"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = "vpc-058d2f6e"
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m public_ip = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
[Pipeline] sh
+ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_instance.ASI_web[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "ASI_web" {
      [32m+[0m[0m ami                                  = "ami-024e6efaf93d85776"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "Java_key2"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "ASI test"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "ASI test"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_security_group.ASI_proj[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ASI_proj" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = -1
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "icmp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = -1
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 8080
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 8080
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ASI_proj"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = "vpc-058d2f6e"
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m public_ip = (known after apply)
[0m[1maws_security_group.ASI_proj: Creating...[0m[0m
[0m[1maws_security_group.ASI_proj: Creation complete after 3s [id=sg-015cc360364cbf36b][0m
[0m[1maws_instance.ASI_web: Creating...[0m[0m
[0m[1maws_instance.ASI_web: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.ASI_web: Provisioning with 'local-exec'...[0m[0m
[0m[1maws_instance.ASI_web (local-exec):[0m [0mExecuting: ["/bin/sh" "-c" "      export ANSIBLE_SSH_ARGS=\"-o StrictHostKeyChecking=no\"\n"]
[0m[1maws_instance.ASI_web: Provisioning with 'local-exec'...[0m[0m
[0m[1maws_instance.ASI_web (local-exec):[0m [0mExecuting: ["/bin/sh" "-c" "echo \"52.14.134.17\" > /home/dele/Inventory\n"]
[0m[1maws_instance.ASI_web: Creation complete after 13s [id=i-01f278b6cd627e158][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mpublic_ip = "52.14.134.17"
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ terraform output public_ip
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Check EC2 Instance Readiness)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ ping -c 1 52.14.134.17
PING 52.14.134.17 (52.14.134.17) 56(84) bytes of data.

--- 52.14.134.17 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[Pipeline] sleep
Sleeping for 30 sec
[Pipeline] sh
+ ping -c 1 52.14.134.17
PING 52.14.134.17 (52.14.134.17) 56(84) bytes of data.
64 bytes from 52.14.134.17: icmp_seq=1 ttl=43 time=67.3 ms

--- 52.14.134.17 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 67.311/67.311/67.311/0.000 ms
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Invoke ansible playbook)
[Pipeline] script
[Pipeline] {
[Pipeline] sshagent
FATAL: [ssh-agent] Could not find specified credentials
[ssh-agent] Looking for ssh-agent implementation...
[ssh-agent]   Exec ssh-agent (binary ssh-agent on a remote machine)
$ ssh-agent
SSH_AUTH_SOCK=/tmp/ssh-XXXXXXwRT84f/agent.21749
SSH_AGENT_PID=21752
[ssh-agent] Started.
[Pipeline] {
[Pipeline] sh
+ sudo ansible-playbook -i /home/dele/Inventory --user ubuntu --private-key /home/dele/Java_key2.pem config.yaml --vault-password-file /home/dele/vault_password.txt

PLAY [Install Docker, Pull and Run Docker Container] ***************************

TASK [Gathering Facts] *********************************************************
ok: [52.14.134.17]

TASK [Install required system packages] ****************************************
changed: [52.14.134.17]

TASK [Add Docker's official GPG key] *******************************************
changed: [52.14.134.17]

TASK [Add Docker repository] ***************************************************
changed: [52.14.134.17]

TASK [Update apt and install docker-ce] ****************************************
changed: [52.14.134.17]

PLAY [Pull Docker Image from Docker Hub and Run Container] *********************

TASK [Gathering Facts] *********************************************************
ok: [52.14.134.17]

TASK [Pull Docker Image from Docker Hub] ***************************************
changed: [52.14.134.17]

TASK [Run Docker Container] ****************************************************
changed: [52.14.134.17]

PLAY RECAP *********************************************************************
52.14.134.17               : ok=8    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

[Pipeline] }
$ ssh-agent -k
unset SSH_AUTH_SOCK;
unset SSH_AGENT_PID;
echo Agent pid 21752 killed;
[ssh-agent] Stopped.
[Pipeline] // sshagent
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
Pipeline executed successfully.
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
